# docker login ghcr.io
# copy this file and the .env file
# docker compose up -d

# if everything needs to be cleared for clean install
# docker system prune -a --volumes

# ATTENTION: When making the NFS share MANAGER and WORKER are used as USERS
# https://dev.to/hackmamba/how-to-create-a-docker-swarm-of-appwrite-containers-and-ui-with-swarmpit-1nje



volumes:
  production_postgres_data: {}
  production_postgres_data_backups: {}
  production_traefik: {}
  production_django_media: {}

  production_redis_data: {}



services:
  django: &django
    image: ghcr.io/oelegeirnaert/scaleos_production_django:latest
    volumes:
      - production_django_media:/app/scaleos/media
    depends_on:
      - postgres
      - redis
    env_file:
      - .env
    command: /start

  postgres:
    image: ghcr.io/oelegeirnaert/scaleos_production_postgres:latest
    volumes:
      - production_postgres_data:/var/lib/postgresql/data
      - production_postgres_data_backups:/backups
    env_file:
      - .env

  traefik:
    image: ghcr.io/oelegeirnaert/scaleos_production_traefik:latest
    depends_on:
      - django
    volumes:
      - production_traefik:/etc/traefik/acme
    ports:
      - '0.0.0.0:80:80'
      - '0.0.0.0:443:443'
      - '0.0.0.0:5555:5555'

  redis:
    image: docker.io/redis:6

    volumes:
      - production_redis_data:/data


  celeryworker:
    <<: *django
    image: ghcr.io/oelegeirnaert/scaleos_production_celeryworker:latest
    command: /start-celeryworker

  celerybeat:
    <<: *django
    image: ghcr.io/oelegeirnaert/scaleos_production_celerybeat:latest
    command: /start-celerybeat

  flower:
    <<: *django
    image: ghcr.io/oelegeirnaert/scaleos_production_flower:latest
    command: /start-flower

  nginx:
    image: ghcr.io/oelegeirnaert/scaleos_production_nginx:latest
    depends_on:
      - django
    volumes:
      - production_django_media:/usr/share/nginx/media:ro
