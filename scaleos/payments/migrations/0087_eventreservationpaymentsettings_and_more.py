# Generated by Django 5.0.12 on 2025-03-31 07:50

import django.db.models.deletion
import scaleos.shared.validators
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('payments', '0086_paymentsettings'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EventReservationPaymentSettings',
            fields=[
                ('paymentsettings_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='payments.paymentsettings')),
            ],
            options={
                'verbose_name': 'event reservation payment settings',
                'verbose_name_plural': 'event reservation payment settings',
            },
            bases=('payments.paymentsettings',),
        ),
        migrations.CreateModel(
            name='EventReservationPaymentCondition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True, null=True)),
                ('modified_on', models.DateTimeField(auto_now=True, null=True)),
                ('to_be_paid_time_amount', models.IntegerField(default=5, null=True)),
                ('to_be_paid_interval', models.CharField(choices=[('seconds', 'seconds'), ('minutes', 'minutes'), ('hours', 'hour'), ('days', 'days'), ('weeks', 'weeks'), ('months', 'months'), ('years', 'years')], default='days', max_length=50)),
                ('payment_moment', models.CharField(choices=[('BEFORE_START_OF_EVENT', 'before the start of the event'), ('AFTER_START_OF_EVENT', 'after the start of the event'), ('BEFORE_END_OF_EVENT', 'before the event ends'), ('AFTER_END_OF_EVENT', 'after the event ended'), ('AT_START_OF_EVENT', 'at the start of the event'), ('AT_END_OF_EVENT', 'at the end of the event')], default='BEFORE_START_OF_EVENT', max_length=50)),
                ('prepayment_type', models.CharField(choices=[('FULL_PRICE', 'full price'), ('FIXED_PRICE', 'fixed price'), ('PERCENTAGE_OF_TOTAL_PRICE', 'percentage of total price'), ('REMAINING_PRICE', 'remaining price')], default='FIXED_PRICE', max_length=40)),
                ('only_when_group_exceeds', models.IntegerField(blank=True, help_text='number of persons', null=True)),
                ('percentage_of_total_price', models.IntegerField(blank=True, null=True, validators=[scaleos.shared.validators.validate_percentage])),
                ('is_warranty', models.BooleanField(default=False)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('modified_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_modifications', to=settings.AUTH_USER_MODEL)),
                ('event_reservation_payment_settings', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='conditions', to='payments.eventreservationpaymentsettings', verbose_name='event reservation payment settings')),
            ],
            options={
                'verbose_name': 'event reservation payment condition',
                'verbose_name_plural': 'event reservation payment conditions',
            },
        ),
    ]
